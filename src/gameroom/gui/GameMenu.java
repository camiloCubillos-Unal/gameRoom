/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gameroom.gui;

import gameroom.bdGestor.Bd_gestor;
import gameroom.games.cardgame.gui.PlayGame;
import java.awt.Color;
import java.awt.Cursor;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author ccubi
 */
public class GameMenu extends javax.swing.JFrame {

    private Color darkBlue = Color.decode("#0f0326");
    private Color ligthBlue = Color.decode("#1c6e8c");
    private Color yellow = Color.decode("#ffd23f");
    private Color red = Color.decode("#dd0426");
    private Color white = Color.decode("#fafaff");
    private ArrayList<String> gameList;
    private int gameIndex;
    private String username;
    private Bd_gestor bdGestor;

    public GameMenu(String _username) {

        // Configuración del usuario
        this.username = _username;

        // Inicialización gameMenu
        setTitle("GameRoom");

        gameList = new ArrayList<>();

        gameList.add("not_flappy_bird");
        gameList.add("pacman");
        gameList.add("snake");
        gameList.add("cardgame");
        gameList.add("pong");

        gameIndex = 0;

        initComponents();

        this.btn_game.setIcon(new ImageIcon(String.format("src\\media\\img\\%s.png", gameList.get(0))));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btn_game = new javax.swing.JButton();
        btn_rightArrow = new javax.swing.JLabel();
        btn_leftArrow = new javax.swing.JLabel();
        btn_ranking = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(darkBlue);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/img/selecciona_un_juego.png"))); // NOI18N

        btn_game.setBorder(null);
        btn_game.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_game.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_gameActionPerformed(evt);
            }
        });

        btn_rightArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/img/right-arrow.png"))); // NOI18N
        btn_rightArrow.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn_rightArrow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_rightArrowMousePressed(evt);
            }
        });

        btn_leftArrow.setIcon(new javax.swing.ImageIcon(getClass().getResource("/media/img/left-arrow-disabled.png"))); // NOI18N
        btn_leftArrow.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        btn_leftArrow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btn_leftArrowMousePressed(evt);
            }
        });

        btn_ranking.setBackground(red);
        btn_ranking.setForeground(new java.awt.Color(255, 255, 255));
        btn_ranking.setText("VER RANKING");
        btn_ranking.setBorder(null);
        btn_ranking.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_ranking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rankingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(54, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(51, 51, 51))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btn_leftArrow)
                        .addGap(66, 66, 66)
                        .addComponent(btn_game, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn_ranking, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_rightArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_leftArrow)
                    .addComponent(btn_game, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_rightArrow))
                .addGap(18, 18, 18)
                .addComponent(btn_ranking, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_gameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_gameActionPerformed
        switch (gameList.get(gameIndex)) {
            case ("not_flappy_bird"): {
                try {
                    gameroom.games.flappybird.graphics.MainFrame maf = new gameroom.games.flappybird.graphics.MainFrame(username);
                    break;
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            case ("snake"):
                gameroom.games.Snake.Juego j = new gameroom.games.Snake.Juego(username);
                break;
            case ("pacman"): {
                try {
                    gameroom.games.pacman.graphics.MainFrame map = new gameroom.games.pacman.graphics.MainFrame(username);
                    break;
                } catch (UnsupportedAudioFileException ex) {
                    Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
                } catch (LineUnavailableException ex) {
                    Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            case ("cardgame"): {
                gameroom.games.cardgame.gui.PlayGame mcardgame = new gameroom.games.cardgame.gui.PlayGame(username);
                mcardgame.setLocationRelativeTo(null);
                mcardgame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                mcardgame.setVisible(true);
                break;
            }
            
            case ("pong"):{
                gameroom.games.Pong.pongfor1.Graficos mpong = new gameroom.games.Pong.pongfor1.Graficos(username);
                mpong.setLocationRelativeTo(null);
                mpong.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                mpong.setVisible(true);
                break;
            }
            
            default:
                break;

        }
    }//GEN-LAST:event_btn_gameActionPerformed

    private void btn_rightArrowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_rightArrowMousePressed
        if (gameIndex < gameList.size() - 1) {
            gameIndex++;
            String iconPath = String.format("src\\media\\img\\%s.png", gameList.get(gameIndex));
            btn_game.setIcon(new ImageIcon(iconPath));

            // Configurar flechas del menu como objetos con interacción
            btn_rightArrow.setIcon(new ImageIcon("src\\media\\img\\right-arrow.png"));
            btn_rightArrow.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            btn_leftArrow.setIcon(new ImageIcon("src\\media\\img\\left-arrow.png"));
            btn_leftArrow.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        }

        // Desactivar boton derecho en el limite superior de la lista de juegos
        if (gameIndex == gameList.size() - 1) {
            btn_rightArrow.setIcon(new ImageIcon("src\\media\\img\\right-arrow-disabled.png"));
            btn_rightArrow.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btn_rightArrowMousePressed

    private void btn_leftArrowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_leftArrowMousePressed
        if (gameIndex > 0) {
            gameIndex--;
            String iconPath = String.format("src\\media\\img\\%s.png", gameList.get(gameIndex));
            btn_game.setIcon(new ImageIcon(iconPath));

            // Configurar flechas del menu como objetos con interacción
            btn_rightArrow.setIcon(new ImageIcon("src\\media\\img\\right-arrow.png"));
            btn_rightArrow.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
            btn_leftArrow.setIcon(new ImageIcon("src\\media\\img\\left-arrow.png"));
            btn_leftArrow.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        }

        // Desactivar boton izquierdo en el limite inferior de la lista de juegos
        if (gameIndex == 0) {
            btn_leftArrow.setIcon(new ImageIcon("src\\media\\img\\left-arrow-disabled.png"));
            btn_leftArrow.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_btn_leftArrowMousePressed

    private void btn_rankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rankingActionPerformed

        RankingScreen rankingScreen;
        try {
            rankingScreen = new RankingScreen(gameList.get(gameIndex));
            rankingScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            rankingScreen.setVisible(true);
            rankingScreen.setLocationRelativeTo(null);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(GameMenu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_rankingActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_game;
    private javax.swing.JLabel btn_leftArrow;
    private javax.swing.JButton btn_ranking;
    private javax.swing.JLabel btn_rightArrow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
